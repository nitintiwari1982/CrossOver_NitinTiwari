From c53b04c3a9d5c55ef741f8e4e974da8be948cac0 Mon Sep 17 00:00:00 2001
From: InterviewTrial <skanchwala@4qlearning.com>
Date: Tue, 18 Sep 2018 23:37:37 +0530
Subject: [PATCH] no message

---
 CrossExchange.Tests/ShareControllerTests.cs |   1 +
 CrossExchange.Tests/TradeControllerTests.cs |   5 +-
 CrossExchange/Controller/TradeController.cs | 108 ++++++++++++++++------------
 3 files changed, 66 insertions(+), 48 deletions(-)

diff --git a/CrossExchange.Tests/ShareControllerTests.cs b/CrossExchange.Tests/ShareControllerTests.cs
index 3f2f17d..e039328 100644
--- a/CrossExchange.Tests/ShareControllerTests.cs
+++ b/CrossExchange.Tests/ShareControllerTests.cs
@@ -31,6 +31,7 @@ namespace CrossExchange.Tests
             // Arrange
 
             // Act
+
             var result = await _shareController.Post(hourRate);
 
             // Assert
diff --git a/CrossExchange.Tests/TradeControllerTests.cs b/CrossExchange.Tests/TradeControllerTests.cs
index d06d9ae..fb6e940 100644
--- a/CrossExchange.Tests/TradeControllerTests.cs
+++ b/CrossExchange.Tests/TradeControllerTests.cs
@@ -25,6 +25,7 @@ namespace CrossExchange.Tests
         [SetUp]
         public void SetUp()
         {
+            var exchangeContext = new Mock<ExchangeContext>();
             ShareRepositoryMock = new Mock<IShareRepository>();
             TradeRepositoryMock = new Mock<ITradeRepository>();
             PortfolioRepositoryMock = new Mock<IPortfolioRepository>();
@@ -43,7 +44,7 @@ namespace CrossExchange.Tests
 
         [Test]
         [TestCase("BUY", 10, 1, "ABC")]// Symbol doesn't exists
-        [TestCase("SEL", 100, 1, "REL")] // Portfolio have insufficent to sell
+        [TestCase("SEL", 1000, 1, "REL")] // Portfolio have insufficent to sell
         [TestCase("BUY", 10, 5, "REL")]// Portfolio doesn't exists
         public async Task Get_bad_request_for_all_mismatches(string action, int quantity, int portfolioId, string symbol)
         {
@@ -53,7 +54,7 @@ namespace CrossExchange.Tests
             TradeModel.Symbol = symbol;
             var result = await tradeController.Post(TradeModel);
             Assert.NotNull(result);
-            var createResult = result as CreatedResult;
+            var createResult = result as BadRequestResult;
             Assert.AreEqual(400, createResult.StatusCode);
         }
 
diff --git a/CrossExchange/Controller/TradeController.cs b/CrossExchange/Controller/TradeController.cs
index 5422157..0102b22 100644
--- a/CrossExchange/Controller/TradeController.cs
+++ b/CrossExchange/Controller/TradeController.cs
@@ -52,46 +52,55 @@ namespace CrossExchange.Controller
         [HttpPost]
         public async Task<IActionResult> Post([FromBody]TradeModel model)
         {
-            if (ModelState.IsValid)
+            try
             {
-                if (!_portfolioRepository.IsExists(model.PortfolioId))
+                if (ModelState.IsValid)
                 {
-                  return BadRequest(string.Format("Sorry {0} not a registered portfolio.", model.PortfolioId));
-                }
-                switch (model.Action)
-                {
-                    case "BUY":
-                        if (!IsSymbolExists(model.Symbol))
-                        {
-                            var buyShare = await _shareRepository.Query().Where(x => x.Symbol.Equals(model.Symbol)).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
-                            await _tradeRepository.InsertAsync(MapToDb(model, buyShare));
-                        }
-                        else
-                        {
-                            return BadRequest(string.Format("Sorry share {0} doesn't asvailable to buy", model.Symbol));
-                        }
-                       
-                        break;
-                    case "SELL":
-                        var sellShare = await _shareRepository.Query().Where(x => x.Symbol.Equals(model.Symbol)).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
-                        var availableForSell = GetAvailableShareToSell(model);
-                        if(availableForSell < model.NoOfShares)
-                        {
-                            return BadRequest(string.Format("sorry only {0} share available to sell", availableForSell));
-                        }
-                        else
-                        {
-                            var sellDetail = MapToDb(model, sellShare);
-                            await _tradeRepository.InsertAsync(sellDetail);
-                        }
-                        
-                        break;
-                    default:
-                        
-                        break;
+                    var isExists = _portfolioRepository.IsExists(model.PortfolioId);
+                    if (!isExists)
+                    {
+                        return BadRequest();
+                    }
+                    switch (model.Action)
+                    {
+                        case "BUY":
+                            if (IsSymbolExists(model.Symbol))
+                            {
+                                var buyShare = await _shareRepository.Query().Where(x => x.Symbol.Equals(model.Symbol)).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
+                                await _tradeRepository.InsertAsync(MapToDb(model, buyShare));
+                            }
+                            else
+                            {
+                                return BadRequest();
+                            }
+
+                            break;
+                        case "SELL":
+                            var sellShare = await _shareRepository.Query().Where(x => x.Symbol.Equals(model.Symbol)).OrderByDescending(x => x.TimeStamp).FirstOrDefaultAsync();
+                            var availableForSell = GetAvailableShareToSell(model);
+                            if (availableForSell < model.NoOfShares)
+                            {
+                                return BadRequest();
+                            }
+                            else
+                            {
+                                var sellDetail = MapToDb(model, sellShare);
+                                await _tradeRepository.InsertAsync(sellDetail);
+                            }
+
+                            break;
+                        default:
+
+                            break;
+                    }
                 }
+                return Created("Trade", model);
             }
-            return Created("Trade", model);
+            catch (Exception ex)
+            {
+                throw;
+            }
+           
         }
 
         [NonAction]
@@ -114,16 +123,23 @@ namespace CrossExchange.Controller
         }
 
         private int GetAvailableShareToSell(TradeModel model)
-        {
-            //// var shares = _tradeRepository.Query().Where(x => x.PortfolioId.Equals(model.PortfolioId) && x.Action.Equals("BUY")).ToList().GroupBy(y => new { y.Symbol, y.NoOfShares });
-
-            var result = from bb in _tradeRepository.Query().Where(x => x.PortfolioId.Equals(model.PortfolioId) && x.Action.Equals("BUY") && x.Symbol.Equals(model.Symbol))
-                     group bb by new { bb.Symbol, bb.PortfolioId } into g
-                     select new
-                     {
-                         Symbol = g.Sum(r => r.NoOfShares)
-                     };
-            return result.First().Symbol;
+        {            
+            var result = _tradeRepository.Query().Where(x => x.PortfolioId.Equals(model.PortfolioId) && x.Symbol.Equals(model.Symbol));
+            var v = (from p in result
+                    group p by p.Action into Temp
+                    select new
+                    {
+                        Action = Temp.Key,
+                        Units = Temp.Sum(r => r.NoOfShares)
+                    }).ToList();
+            if(v != null)
+            {
+                var totalBuy = v.FirstOrDefault(x => x.Action.Equals("BUY")) == null ? 0 : v.FirstOrDefault(x => x.Action.Equals("BUY")).Units;
+                var alreadySell = v.FirstOrDefault(x => x.Action.Equals("SELL")) == null ? 0 : v.FirstOrDefault(x => x.Action.Equals("SELL")).Units;
+                return totalBuy - alreadySell;
+            }
+             
+            return 0;
         }
     }
 }
-- 
2.10.2.windows.1

From 8a5b2ec5d87192f13c428385b600c1c0618552d6 Mon Sep 17 00:00:00 2001
From: InterviewTrial <skanchwala@4qlearning.com>
Date: Mon, 17 Sep 2018 23:57:30 +0530
Subject: [PATCH] Existing Code from Cross Over

---
 CrossExchange.Tests/CrossExchange.Tests.csproj     |  22 ++++
 CrossExchange.Tests/ShareControllerTests.cs        |  45 ++++++++
 CrossExchange.Tests/coverage.bat                   |  11 ++
 CrossExchange.sln                                  |  31 ++++++
 CrossExchange/Controller/PortfolioController.cs    |  40 +++++++
 CrossExchange/Controller/ShareController.cs        |  47 ++++++++
 CrossExchange/Controller/TradeController.cs        |  59 ++++++++++
 CrossExchange/CrossExchange.csproj                 |  17 +++
 .../Exceptions/HttpStatusCodeException.cs          |  31 ++++++
 .../HttpStatusCodeExceptionMiddleware.cs           |  43 ++++++++
 .../HttpStatusCodeExceptionMiddlewareExtensions.cs |  12 +++
 .../20180818121317_InitialCreate.Designer.cs       | 119 +++++++++++++++++++++
 .../Migrations/20180818121317_InitialCreate.cs     | 119 +++++++++++++++++++++
 .../Migrations/ExchangeContextModelSnapshot.cs     | 117 ++++++++++++++++++++
 CrossExchange/Model/HourlyShareRate.cs             |  19 ++++
 CrossExchange/Model/Portfolio.cs                   |  16 +++
 CrossExchange/Model/Trade.cs                       |  17 +++
 CrossExchange/Model/TradeModel.cs                  |  20 ++++
 CrossExchange/Program.cs                           |  18 ++++
 CrossExchange/Properties/launchSettings.json       |  27 +++++
 CrossExchange/Repository/ExchangeContext.cs        |  62 +++++++++++
 CrossExchange/Repository/GenericRepository.cs      |  34 ++++++
 CrossExchange/Repository/IGenericRepository.cs     |  16 +++
 CrossExchange/Repository/IPortfolioRepository.cs   |   9 ++
 CrossExchange/Repository/IShareRepository.cs       |   6 ++
 CrossExchange/Repository/ITradeRepository.cs       |   6 ++
 CrossExchange/Repository/PortfolioRepository.cs    |  18 ++++
 CrossExchange/Repository/ShareRepository.cs        |  10 ++
 CrossExchange/Repository/TradeRepository.cs        |  10 ++
 CrossExchange/Startup.cs                           |  48 +++++++++
 CrossExchange/appsettings.Development.json         |  10 ++
 CrossExchange/appsettings.json                     |  11 ++
 Readme.txt                                         |  68 ++++++++++++
 33 files changed, 1138 insertions(+)
 create mode 100644 CrossExchange.Tests/CrossExchange.Tests.csproj
 create mode 100644 CrossExchange.Tests/ShareControllerTests.cs
 create mode 100644 CrossExchange.Tests/coverage.bat
 create mode 100644 CrossExchange.sln
 create mode 100644 CrossExchange/Controller/PortfolioController.cs
 create mode 100644 CrossExchange/Controller/ShareController.cs
 create mode 100644 CrossExchange/Controller/TradeController.cs
 create mode 100644 CrossExchange/CrossExchange.csproj
 create mode 100644 CrossExchange/Exceptions/HttpStatusCodeException.cs
 create mode 100644 CrossExchange/Exceptions/HttpStatusCodeExceptionMiddleware.cs
 create mode 100644 CrossExchange/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs
 create mode 100644 CrossExchange/Migrations/20180818121317_InitialCreate.Designer.cs
 create mode 100644 CrossExchange/Migrations/20180818121317_InitialCreate.cs
 create mode 100644 CrossExchange/Migrations/ExchangeContextModelSnapshot.cs
 create mode 100644 CrossExchange/Model/HourlyShareRate.cs
 create mode 100644 CrossExchange/Model/Portfolio.cs
 create mode 100644 CrossExchange/Model/Trade.cs
 create mode 100644 CrossExchange/Model/TradeModel.cs
 create mode 100644 CrossExchange/Program.cs
 create mode 100644 CrossExchange/Properties/launchSettings.json
 create mode 100644 CrossExchange/Repository/ExchangeContext.cs
 create mode 100644 CrossExchange/Repository/GenericRepository.cs
 create mode 100644 CrossExchange/Repository/IGenericRepository.cs
 create mode 100644 CrossExchange/Repository/IPortfolioRepository.cs
 create mode 100644 CrossExchange/Repository/IShareRepository.cs
 create mode 100644 CrossExchange/Repository/ITradeRepository.cs
 create mode 100644 CrossExchange/Repository/PortfolioRepository.cs
 create mode 100644 CrossExchange/Repository/ShareRepository.cs
 create mode 100644 CrossExchange/Repository/TradeRepository.cs
 create mode 100644 CrossExchange/Startup.cs
 create mode 100644 CrossExchange/appsettings.Development.json
 create mode 100644 CrossExchange/appsettings.json
 create mode 100644 Readme.txt

diff --git a/CrossExchange.Tests/CrossExchange.Tests.csproj b/CrossExchange.Tests/CrossExchange.Tests.csproj
new file mode 100644
index 0000000..435191c
--- /dev/null
+++ b/CrossExchange.Tests/CrossExchange.Tests.csproj
@@ -0,0 +1,22 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+
+    <IsPackable>false</IsPackable>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.6.0" />
+    <DotNetCliToolReference Include="MiniCover" Version="2.0.0-ci-20180304114938" />
+    <PackageReference Include="Moq" Version="4.9.0" />
+    <PackageReference Include="NUnit" Version="3.10.1" />
+    <PackageReference Include="NUnit3TestAdapter" Version="3.9.0" />
+    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="15.5.0" />
+  </ItemGroup>
+
+  <ItemGroup>
+    <ProjectReference Include="..\CrossExchange\CrossExchange.csproj" />
+  </ItemGroup>
+
+</Project>
diff --git a/CrossExchange.Tests/ShareControllerTests.cs b/CrossExchange.Tests/ShareControllerTests.cs
new file mode 100644
index 0000000..3f2f17d
--- /dev/null
+++ b/CrossExchange.Tests/ShareControllerTests.cs
@@ -0,0 +1,45 @@
+using System;
+using System.Threading.Tasks;
+using CrossExchange.Controller;
+using Microsoft.AspNetCore.Mvc;
+using NUnit.Framework;
+using Moq;
+
+namespace CrossExchange.Tests
+{
+    public class ShareControllerTests
+    {
+        private readonly Mock<IShareRepository> _shareRepositoryMock = new Mock<IShareRepository>();
+
+        private readonly ShareController _shareController;
+
+        public ShareControllerTests()
+        {
+            _shareController = new ShareController(_shareRepositoryMock.Object);
+        }
+
+        [Test]
+        public async Task Post_ShouldInsertHourlySharePrice()
+        {
+            var hourRate = new HourlyShareRate
+            {
+                Symbol = "CBI",
+                Rate = 330.0M,
+                TimeStamp = new DateTime(2018, 08, 17, 5, 0, 0)
+            };
+
+            // Arrange
+
+            // Act
+            var result = await _shareController.Post(hourRate);
+
+            // Assert
+            Assert.NotNull(result);
+
+            var createdResult = result as CreatedResult;
+            Assert.NotNull(createdResult);
+            Assert.AreEqual(201, createdResult.StatusCode);
+        }
+        
+    }
+}
diff --git a/CrossExchange.Tests/coverage.bat b/CrossExchange.Tests/coverage.bat
new file mode 100644
index 0000000..391d668
--- /dev/null
+++ b/CrossExchange.Tests/coverage.bat
@@ -0,0 +1,11 @@
+@echo off
+
+dotnet clean
+dotnet build /p:DebugType=Full
+dotnet minicover instrument --workdir ../ --assemblies CrossExchange.Tests/**/bin/**/*.dll --sources CrossExchange/**/*.cs --exclude-sources CrossExchange/Migrations/**/*.cs --exclude-sources CrossExchange/*.cs --exclude-sources CrossExchange\Repository\ExchangeContext.cs
+
+dotnet minicover reset --workdir ../
+
+dotnet test --no-build
+dotnet minicover uninstrument --workdir ../
+dotnet minicover report --workdir ../ --threshold 60
\ No newline at end of file
diff --git a/CrossExchange.sln b/CrossExchange.sln
new file mode 100644
index 0000000..dab4457
--- /dev/null
+++ b/CrossExchange.sln
@@ -0,0 +1,31 @@
+﻿
+Microsoft Visual Studio Solution File, Format Version 12.00
+# Visual Studio 15
+VisualStudioVersion = 15.0.27428.2037
+MinimumVisualStudioVersion = 10.0.40219.1
+Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "CrossExchange", "CrossExchange\CrossExchange.csproj", "{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}"
+EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CrossExchange.Tests", "CrossExchange.Tests\CrossExchange.Tests.csproj", "{133F2B3B-4D6C-4216-876D-707A76233D15}"
+EndProject
+Global
+	GlobalSection(SolutionConfigurationPlatforms) = preSolution
+		Debug|Any CPU = Debug|Any CPU
+		Release|Any CPU = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(ProjectConfigurationPlatforms) = postSolution
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{62E4DEEC-BB13-453C-9CF2-0D0B122D7F55}.Release|Any CPU.Build.0 = Release|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{133F2B3B-4D6C-4216-876D-707A76233D15}.Release|Any CPU.Build.0 = Release|Any CPU
+	EndGlobalSection
+	GlobalSection(SolutionProperties) = preSolution
+		HideSolutionNode = FALSE
+	EndGlobalSection
+	GlobalSection(ExtensibilityGlobals) = postSolution
+		SolutionGuid = {D955BA32-8AAA-4CEF-8F8E-0FC19C4D586E}
+	EndGlobalSection
+EndGlobal
diff --git a/CrossExchange/Controller/PortfolioController.cs b/CrossExchange/Controller/PortfolioController.cs
new file mode 100644
index 0000000..bf2f8d4
--- /dev/null
+++ b/CrossExchange/Controller/PortfolioController.cs
@@ -0,0 +1,40 @@
+﻿using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Mvc;
+
+namespace CrossExchange.Controller
+{
+    [Route("api/Portfolio")]
+    public class PortfolioController : ControllerBase
+    {
+        private IPortfolioRepository _portfolioRepository { get; set; }
+
+        public PortfolioController(IShareRepository shareRepository, ITradeRepository tradeRepository, IPortfolioRepository portfolioRepository)
+        {
+            _portfolioRepository = portfolioRepository;
+        }
+
+        [HttpGet("{portFolioid}")]
+        public async Task<IActionResult> GetPortfolioInfo([FromRoute]int portFolioid)
+        {
+            var portfolio = _portfolioRepository.GetAll().Where(x => x.Id.Equals(portFolioid));
+            
+            return Ok(portfolio);
+        }
+
+
+        [HttpPost]
+        public async Task<IActionResult> Post([FromBody]Portfolio value)
+        {
+            if (!ModelState.IsValid)
+            {
+                return BadRequest(ModelState);
+            }
+
+            await _portfolioRepository.InsertAsync(value);
+
+            return Created($"Portfolio/{value.Id}", value);
+        }
+
+    }
+}
diff --git a/CrossExchange/Controller/ShareController.cs b/CrossExchange/Controller/ShareController.cs
new file mode 100644
index 0000000..8ff4227
--- /dev/null
+++ b/CrossExchange/Controller/ShareController.cs
@@ -0,0 +1,47 @@
+﻿using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+
+namespace CrossExchange.Controller
+{
+    [Route("api/Share")]
+    public class ShareController : ControllerBase
+    {
+        public IShareRepository _shareRepository { get; set; }
+
+        public ShareController(IShareRepository shareRepository)
+        {
+            _shareRepository = shareRepository;
+        }
+
+        [HttpGet("{symbol}")]
+        public async Task<IActionResult> Get([FromRoute]string symbol)
+        {
+            var shares = _shareRepository.Query().Where(x => x.Symbol.Equals(symbol)).ToList();
+            return Ok(shares);
+        }
+
+
+        [HttpGet("{symbol}/Latest")]
+        public async Task<IActionResult> GetLatestPrice([FromRoute]string symbol)
+        {
+            var share = await _shareRepository.Query().Where(x => x.Symbol.Equals(symbol)).FirstOrDefaultAsync();
+            return Ok(share?.Rate);
+        }
+
+        [HttpPost]
+        public async Task<IActionResult> Post([FromBody]HourlyShareRate value)
+        {
+            if (!ModelState.IsValid)
+            {
+                return BadRequest(ModelState);
+            }
+
+            await _shareRepository.InsertAsync(value);
+
+            return Created($"Share/{value.Id}", value);
+        }
+        
+    }
+}
diff --git a/CrossExchange/Controller/TradeController.cs b/CrossExchange/Controller/TradeController.cs
new file mode 100644
index 0000000..3b51c75
--- /dev/null
+++ b/CrossExchange/Controller/TradeController.cs
@@ -0,0 +1,59 @@
+﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Http;
+using Microsoft.AspNetCore.Mvc;
+using Microsoft.EntityFrameworkCore;
+
+
+namespace CrossExchange.Controller
+{
+    [Route("api/Trade")]
+    public class TradeController : ControllerBase
+    {
+        private IShareRepository _shareRepository { get; set; }
+        private ITradeRepository _tradeRepository { get; set; }
+        private IPortfolioRepository _portfolioRepository { get; set; }
+
+        public TradeController(IShareRepository shareRepository, ITradeRepository tradeRepository, IPortfolioRepository portfolioRepository)
+        {
+            _shareRepository = shareRepository;
+            _tradeRepository = tradeRepository;
+            _portfolioRepository = portfolioRepository;
+        }
+
+
+        [HttpGet("{portfolioid}")]
+        public async Task<IActionResult> GetAllTradings([FromRoute]int portFolioid)
+        {
+            var trade = _tradeRepository.Query().Where(x => x.PortfolioId.Equals(portFolioid));
+            return Ok(trade);
+        }
+
+
+
+        /*************************************************************************************************************************************
+        For a given portfolio, with all the registered shares you need to do a trade which could be either a BUY or SELL trade. For a particular trade keep following conditions in mind:
+		BUY:
+        a) The rate at which the shares will be bought will be the latest price in the database.
+		b) The share specified should be a registered one otherwise it should be considered a bad request. 
+		c) The Portfolio of the user should also be registered otherwise it should be considered a bad request. 
+                
+        SELL:
+        a) The share should be there in the portfolio of the customer.
+		b) The Portfolio of the user should be registered otherwise it should be considered a bad request. 
+		c) The rate at which the shares will be sold will be the latest price in the database.
+        d) The number of shares should be sufficient so that it can be sold. 
+        Hint: You need to group the total shares bought and sold of a particular share and see the difference to figure out if there are sufficient quantities available for SELL. 
+
+        *************************************************************************************************************************************/
+
+        [HttpPost]
+        public async Task<IActionResult> Post([FromBody]TradeModel model)
+        {
+            return Created("Trade", model);
+        }
+        
+    }
+}
diff --git a/CrossExchange/CrossExchange.csproj b/CrossExchange/CrossExchange.csproj
new file mode 100644
index 0000000..3f1f557
--- /dev/null
+++ b/CrossExchange/CrossExchange.csproj
@@ -0,0 +1,17 @@
+<Project Sdk="Microsoft.NET.Sdk.Web">
+  <PropertyGroup>
+    <TargetFramework>netcoreapp2.0</TargetFramework>
+  </PropertyGroup>
+  <ItemGroup>
+    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.6" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="2.1.1" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="2.1.0" />
+    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="2.1.1" />
+    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.0.3" />
+  </ItemGroup>
+  <ItemGroup>
+    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.3" />
+	<DotNetCliToolReference Include="Microsoft.EntityFrameworkCore.Tools.DotNet" Version="2.0.1" />
+    <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0" />
+  </ItemGroup>
+</Project>
diff --git a/CrossExchange/Exceptions/HttpStatusCodeException.cs b/CrossExchange/Exceptions/HttpStatusCodeException.cs
new file mode 100644
index 0000000..dee7a93
--- /dev/null
+++ b/CrossExchange/Exceptions/HttpStatusCodeException.cs
@@ -0,0 +1,31 @@
+using System;
+using Newtonsoft.Json.Linq;
+
+namespace CrossExchange
+{
+    public class HttpStatusCodeException : Exception
+    {
+        public HttpStatusCodeException(int statusCode)
+        {
+            StatusCode = statusCode;
+        }
+
+        public HttpStatusCodeException(int statusCode, string message) : base(message)
+        {
+            StatusCode = statusCode;
+        }
+
+        public HttpStatusCodeException(int statusCode, Exception inner) : this(statusCode, inner.ToString())
+        {
+        }
+
+        public HttpStatusCodeException(int statusCode, JObject errorObject) : this(statusCode, errorObject.ToString())
+        {
+            ContentType = @"application/json";
+        }
+
+        public int StatusCode { get; set; }
+
+        public string ContentType { get; set; } = @"text/plain";
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Exceptions/HttpStatusCodeExceptionMiddleware.cs b/CrossExchange/Exceptions/HttpStatusCodeExceptionMiddleware.cs
new file mode 100644
index 0000000..79e7f6a
--- /dev/null
+++ b/CrossExchange/Exceptions/HttpStatusCodeExceptionMiddleware.cs
@@ -0,0 +1,43 @@
+using System;
+using System.Threading.Tasks;
+using Microsoft.AspNetCore.Http;
+using Microsoft.Extensions.Logging;
+
+namespace CrossExchange
+{
+    public class HttpStatusCodeExceptionMiddleware
+    {
+        private readonly ILogger<HttpStatusCodeExceptionMiddleware> _logger;
+        private readonly RequestDelegate _next;
+
+        public HttpStatusCodeExceptionMiddleware(RequestDelegate next, ILoggerFactory loggerFactory)
+        {
+            _next = next ?? throw new ArgumentNullException(nameof(next));
+            _logger = loggerFactory?.CreateLogger<HttpStatusCodeExceptionMiddleware>() ??
+                      throw new ArgumentNullException(nameof(loggerFactory));
+        }
+
+        public async Task Invoke(HttpContext context)
+        {
+            try
+            {
+                await _next(context);
+            }
+            catch (HttpStatusCodeException ex)
+            {
+                if (context.Response.HasStarted)
+                {
+                    _logger.LogWarning(
+                        "The response has already started, the http status code middleware will not be executed.");
+                    throw;
+                }
+
+                context.Response.Clear();
+                context.Response.StatusCode = ex.StatusCode;
+                context.Response.ContentType = ex.ContentType;
+
+                await context.Response.WriteAsync(ex.Message);
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs b/CrossExchange/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs
new file mode 100644
index 0000000..767c9ba
--- /dev/null
+++ b/CrossExchange/Exceptions/HttpStatusCodeExceptionMiddlewareExtensions.cs
@@ -0,0 +1,12 @@
+using Microsoft.AspNetCore.Builder;
+
+namespace CrossExchange
+{
+    public static class HttpStatusCodeExceptionMiddlewareExtensions
+    {
+        public static IApplicationBuilder UseHttpStatusCodeExceptionMiddleware(this IApplicationBuilder builder)
+        {
+            return builder.UseMiddleware<HttpStatusCodeExceptionMiddleware>();
+        }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Migrations/20180818121317_InitialCreate.Designer.cs b/CrossExchange/Migrations/20180818121317_InitialCreate.Designer.cs
new file mode 100644
index 0000000..c3502f8
--- /dev/null
+++ b/CrossExchange/Migrations/20180818121317_InitialCreate.Designer.cs
@@ -0,0 +1,119 @@
+﻿// <auto-generated />
+using System;
+using CrossExchange;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace CrossExchange.Migrations
+{
+    [DbContext(typeof(ExchangeContext))]
+    [Migration("20180818121317_InitialCreate")]
+    partial class InitialCreate
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("CrossExchange.HourlyShareRate", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<decimal>("Rate");
+
+                    b.Property<string>("Symbol")
+                        .IsRequired();
+
+                    b.Property<DateTime>("TimeStamp");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shares");
+
+                    b.HasData(
+                        new { Id = 1, Rate = 90m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 2, Rate = 95m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 3, Rate = 100m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 4, Rate = 89m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 5, Rate = 110m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 6, Rate = 96m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 7, Rate = 97m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 8, Rate = 99m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 9, Rate = 91m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 10, Rate = 96m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 11, Rate = 105m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 12, Rate = 87m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 13, Rate = 100m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 14, Rate = 98m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 15, Rate = 95m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 16, Rate = 92m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) }
+                    );
+                });
+
+            modelBuilder.Entity("CrossExchange.Portfolio", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Name")
+                        .IsRequired();
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Portfolios");
+
+                    b.HasData(
+                        new { Id = 1, Name = "John Doe" }
+                    );
+                });
+
+            modelBuilder.Entity("CrossExchange.Trade", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Action");
+
+                    b.Property<int>("NoOfShares");
+
+                    b.Property<int>("PortfolioId");
+
+                    b.Property<decimal>("Price");
+
+                    b.Property<string>("Symbol");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("PortfolioId");
+
+                    b.ToTable("Trades");
+
+                    b.HasData(
+                        new { Id = 1, Action = "BUY", NoOfShares = 50, PortfolioId = 1, Price = 5000.0m, Symbol = "REL" },
+                        new { Id = 2, Action = "BUY", NoOfShares = 100, PortfolioId = 1, Price = 10000.0m, Symbol = "REL" },
+                        new { Id = 3, Action = "BUY", NoOfShares = 150, PortfolioId = 1, Price = 14250.0m, Symbol = "CBI" },
+                        new { Id = 4, Action = "SELL", NoOfShares = 70, PortfolioId = 1, Price = 6790.0m, Symbol = "CBI" }
+                    );
+                });
+
+            modelBuilder.Entity("CrossExchange.Trade", b =>
+                {
+                    b.HasOne("CrossExchange.Portfolio")
+                        .WithMany("Trade")
+                        .HasForeignKey("PortfolioId")
+                        .OnDelete(DeleteBehavior.Cascade);
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/CrossExchange/Migrations/20180818121317_InitialCreate.cs b/CrossExchange/Migrations/20180818121317_InitialCreate.cs
new file mode 100644
index 0000000..7b4de24
--- /dev/null
+++ b/CrossExchange/Migrations/20180818121317_InitialCreate.cs
@@ -0,0 +1,119 @@
+﻿using System;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace CrossExchange.Migrations
+{
+    public partial class InitialCreate : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.CreateTable(
+                name: "Portfolios",
+                columns: table => new
+                {
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Name = table.Column<string>(nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Portfolios", x => x.Id);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "Shares",
+                columns: table => new
+                {
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    TimeStamp = table.Column<DateTime>(nullable: false),
+                    Symbol = table.Column<string>(nullable: false),
+                    Rate = table.Column<decimal>(nullable: false)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Shares", x => x.Id);
+                });
+
+            migrationBuilder.CreateTable(
+                name: "Trades",
+                columns: table => new
+                {
+                    Id = table.Column<int>(nullable: false)
+                        .Annotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn),
+                    Symbol = table.Column<string>(nullable: true),
+                    NoOfShares = table.Column<int>(nullable: false),
+                    Price = table.Column<decimal>(nullable: false),
+                    PortfolioId = table.Column<int>(nullable: false),
+                    Action = table.Column<string>(nullable: true)
+                },
+                constraints: table =>
+                {
+                    table.PrimaryKey("PK_Trades", x => x.Id);
+                    table.ForeignKey(
+                        name: "FK_Trades_Portfolios_PortfolioId",
+                        column: x => x.PortfolioId,
+                        principalTable: "Portfolios",
+                        principalColumn: "Id",
+                        onDelete: ReferentialAction.Cascade);
+                });
+
+            migrationBuilder.InsertData(
+                table: "Portfolios",
+                columns: new[] { "Id", "Name" },
+                values: new object[] { 1, "John Doe" });
+
+            migrationBuilder.InsertData(
+                table: "Shares",
+                columns: new[] { "Id", "Rate", "Symbol", "TimeStamp" },
+                values: new object[,]
+                {
+                    { 15, 95m, "CBI", new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 14, 98m, "CBI", new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 13, 100m, "CBI", new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 12, 87m, "CBI", new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 11, 105m, "CBI", new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 10, 96m, "CBI", new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 16, 92m, "CBI", new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 9, 91m, "CBI", new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 7, 97m, "REL", new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 6, 96m, "REL", new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 5, 110m, "REL", new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 4, 89m, "REL", new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 3, 100m, "REL", new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 2, 95m, "REL", new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 8, 99m, "REL", new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                    { 1, 90m, "REL", new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) }
+                });
+
+            migrationBuilder.InsertData(
+                table: "Trades",
+                columns: new[] { "Id", "Action", "NoOfShares", "PortfolioId", "Price", "Symbol" },
+                values: new object[,]
+                {
+                    { 1, "BUY", 50, 1, 5000.0m, "REL" },
+                    { 2, "BUY", 100, 1, 10000.0m, "REL" },
+                    { 3, "BUY", 150, 1, 14250.0m, "CBI" },
+                    { 4, "SELL", 70, 1, 6790.0m, "CBI" }
+                });
+
+            migrationBuilder.CreateIndex(
+                name: "IX_Trades_PortfolioId",
+                table: "Trades",
+                column: "PortfolioId");
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropTable(
+                name: "Shares");
+
+            migrationBuilder.DropTable(
+                name: "Trades");
+
+            migrationBuilder.DropTable(
+                name: "Portfolios");
+        }
+    }
+}
diff --git a/CrossExchange/Migrations/ExchangeContextModelSnapshot.cs b/CrossExchange/Migrations/ExchangeContextModelSnapshot.cs
new file mode 100644
index 0000000..012d166
--- /dev/null
+++ b/CrossExchange/Migrations/ExchangeContextModelSnapshot.cs
@@ -0,0 +1,117 @@
+﻿// <auto-generated />
+using System;
+using CrossExchange;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Metadata;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace CrossExchange.Migrations
+{
+    [DbContext(typeof(ExchangeContext))]
+    partial class ExchangeContextModelSnapshot : ModelSnapshot
+    {
+        protected override void BuildModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
+                .HasAnnotation("Relational:MaxIdentifierLength", 128)
+                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+            modelBuilder.Entity("CrossExchange.HourlyShareRate", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<decimal>("Rate");
+
+                    b.Property<string>("Symbol")
+                        .IsRequired();
+
+                    b.Property<DateTime>("TimeStamp");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shares");
+
+                    b.HasData(
+                        new { Id = 1, Rate = 90m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 2, Rate = 95m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 3, Rate = 100m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 4, Rate = 89m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 5, Rate = 110m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 6, Rate = 96m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 7, Rate = 97m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 8, Rate = 99m, Symbol = "REL", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 9, Rate = 91m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 1, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 10, Rate = 96m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 2, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 11, Rate = 105m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 3, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 12, Rate = 87m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 4, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 13, Rate = 100m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 5, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 14, Rate = 98m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 6, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 15, Rate = 95m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 7, 0, 0, 0, DateTimeKind.Unspecified) },
+                        new { Id = 16, Rate = 92m, Symbol = "CBI", TimeStamp = new DateTime(2018, 8, 13, 8, 0, 0, 0, DateTimeKind.Unspecified) }
+                    );
+                });
+
+            modelBuilder.Entity("CrossExchange.Portfolio", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Name")
+                        .IsRequired();
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Portfolios");
+
+                    b.HasData(
+                        new { Id = 1, Name = "John Doe" }
+                    );
+                });
+
+            modelBuilder.Entity("CrossExchange.Trade", b =>
+                {
+                    b.Property<int>("Id")
+                        .ValueGeneratedOnAdd()
+                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
+
+                    b.Property<string>("Action");
+
+                    b.Property<int>("NoOfShares");
+
+                    b.Property<int>("PortfolioId");
+
+                    b.Property<decimal>("Price");
+
+                    b.Property<string>("Symbol");
+
+                    b.HasKey("Id");
+
+                    b.HasIndex("PortfolioId");
+
+                    b.ToTable("Trades");
+
+                    b.HasData(
+                        new { Id = 1, Action = "BUY", NoOfShares = 50, PortfolioId = 1, Price = 5000.0m, Symbol = "REL" },
+                        new { Id = 2, Action = "BUY", NoOfShares = 100, PortfolioId = 1, Price = 10000.0m, Symbol = "REL" },
+                        new { Id = 3, Action = "BUY", NoOfShares = 150, PortfolioId = 1, Price = 14250.0m, Symbol = "CBI" },
+                        new { Id = 4, Action = "SELL", NoOfShares = 70, PortfolioId = 1, Price = 6790.0m, Symbol = "CBI" }
+                    );
+                });
+
+            modelBuilder.Entity("CrossExchange.Trade", b =>
+                {
+                    b.HasOne("CrossExchange.Portfolio")
+                        .WithMany("Trade")
+                        .HasForeignKey("PortfolioId")
+                        .OnDelete(DeleteBehavior.Cascade);
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/CrossExchange/Model/HourlyShareRate.cs b/CrossExchange/Model/HourlyShareRate.cs
new file mode 100644
index 0000000..03f214c
--- /dev/null
+++ b/CrossExchange/Model/HourlyShareRate.cs
@@ -0,0 +1,19 @@
+﻿using System;
+using System.ComponentModel.DataAnnotations;
+
+namespace CrossExchange
+{
+    public class HourlyShareRate
+    {
+        public int Id { get; set; }
+
+        [Required]
+        public DateTime TimeStamp { get; set; }
+
+        [Required]
+        public string Symbol { get; set; }
+
+        [Required]
+        public decimal Rate { get; set; }
+    }
+}
diff --git a/CrossExchange/Model/Portfolio.cs b/CrossExchange/Model/Portfolio.cs
new file mode 100644
index 0000000..d67d813
--- /dev/null
+++ b/CrossExchange/Model/Portfolio.cs
@@ -0,0 +1,16 @@
+﻿using System.Collections.Generic;
+using System.ComponentModel.DataAnnotations;
+
+namespace CrossExchange
+{
+    public class Portfolio
+    {
+        public int Id { get; set; }
+
+        [Required]
+        public string Name { get; set; }
+        
+        public List<Trade> Trade { get; set; }
+
+    }
+}
diff --git a/CrossExchange/Model/Trade.cs b/CrossExchange/Model/Trade.cs
new file mode 100644
index 0000000..738e5fc
--- /dev/null
+++ b/CrossExchange/Model/Trade.cs
@@ -0,0 +1,17 @@
+﻿namespace CrossExchange
+{
+    public class Trade
+    {
+        public int Id { get; set; }
+        
+        public string Symbol { get; set; }
+
+        public int NoOfShares { get; set; }
+
+        public decimal Price { get; set; }       
+
+        public int PortfolioId { get; set; }
+        
+        public string Action { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Model/TradeModel.cs b/CrossExchange/Model/TradeModel.cs
new file mode 100644
index 0000000..70aa8f6
--- /dev/null
+++ b/CrossExchange/Model/TradeModel.cs
@@ -0,0 +1,20 @@
+﻿using System.ComponentModel.DataAnnotations;
+
+namespace CrossExchange
+{
+    public class TradeModel
+    {
+        [Required]
+        public string Symbol { get; set; }
+
+        [Required]
+        public int NoOfShares { get; set; }
+
+        [Required]
+        public int PortfolioId { get; set; }
+
+        [Required]
+        [RegularExpression("BUY|SELL")]
+        public string Action { get; set; }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Program.cs b/CrossExchange/Program.cs
new file mode 100644
index 0000000..fc14355
--- /dev/null
+++ b/CrossExchange/Program.cs
@@ -0,0 +1,18 @@
+﻿using Microsoft.AspNetCore;
+using Microsoft.AspNetCore.Hosting;
+
+namespace CrossExchange
+{
+    public class Program
+    {
+        public static void Main(string[] args)
+        {
+            BuildWebHost(args).Run();
+        }
+
+        public static IWebHost BuildWebHost(string[] args) =>
+            WebHost.CreateDefaultBuilder(args)
+                .UseStartup<Startup>()
+                .Build();
+    }
+}
diff --git a/CrossExchange/Properties/launchSettings.json b/CrossExchange/Properties/launchSettings.json
new file mode 100644
index 0000000..e2cb607
--- /dev/null
+++ b/CrossExchange/Properties/launchSettings.json
@@ -0,0 +1,27 @@
+{
+  "iisSettings": {
+    "windowsAuthentication": false,
+    "anonymousAuthentication": true,
+    "iisExpress": {
+      "applicationUrl": "http://localhost:51207/",
+      "sslPort": 0
+    }
+  },
+  "profiles": {
+    "IIS Express": {
+      "commandName": "IISExpress",
+      "launchBrowser": true,
+      "environmentVariables": {
+        "ASPNETCORE_ENVIRONMENT": "Development"
+      }
+    },
+    "CrossExchange": {
+      "commandName": "Project",
+      "launchBrowser": true,
+      "environmentVariables": {
+        "ASPNETCORE_ENVIRONMENT": "Development"
+      },
+      "applicationUrl": "http://localhost:51208/"
+    }
+  }
+}
diff --git a/CrossExchange/Repository/ExchangeContext.cs b/CrossExchange/Repository/ExchangeContext.cs
new file mode 100644
index 0000000..e10769e
--- /dev/null
+++ b/CrossExchange/Repository/ExchangeContext.cs
@@ -0,0 +1,62 @@
+﻿using Microsoft.EntityFrameworkCore;
+using System;
+using System.Collections.Generic;
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace CrossExchange
+{
+    public class ExchangeContext : DbContext
+    {
+        public ExchangeContext()
+        {
+        }
+
+        public ExchangeContext(DbContextOptions<ExchangeContext> options) : base(options)
+        {
+        }
+
+
+        public DbSet<Portfolio> Portfolios { get; set; }
+
+        public DbSet<Trade> Trades { get; set; }
+
+        public DbSet<HourlyShareRate> Shares { get; set; }
+
+        protected override void OnModelCreating(ModelBuilder modelBuilder)
+        {
+            modelBuilder.Entity<Portfolio>().HasData(new Portfolio { Id = 1 , Name = "John Doe"});
+
+            modelBuilder.Entity<Trade>().HasData(
+            new  { Id = 1, NoOfShares = 50, Action = "BUY", Price = 5000.0M, Symbol = "REL" , PortfolioId = 1 },
+            new  { Id = 2, NoOfShares = 100, Action = "BUY", Price = 10000.0M, Symbol = "REL", PortfolioId = 1 },
+            new  { Id = 3, NoOfShares = 150, Action = "BUY", Price = 14250.0M, Symbol = "CBI", PortfolioId = 1 },
+            new  { Id = 4, NoOfShares = 70, Action = "SELL", Price = 6790.0M, Symbol = "CBI", PortfolioId = 1 });
+
+            modelBuilder.Entity<HourlyShareRate>().HasData(
+                new HourlyShareRate { Id = 1, Symbol = "REL", Rate = 90, TimeStamp = new DateTime(2018, 08, 13, 01, 00, 00) },
+                new HourlyShareRate { Id = 2, Symbol = "REL", Rate = 95, TimeStamp = new DateTime(2018, 08, 13, 02, 00, 00) },
+                new HourlyShareRate { Id = 3, Symbol = "REL", Rate = 100, TimeStamp = new DateTime(2018, 08, 13, 03, 00, 00) },
+                new HourlyShareRate { Id = 4, Symbol = "REL", Rate = 89, TimeStamp = new DateTime(2018, 08, 13, 04, 00, 00) },
+                new HourlyShareRate { Id = 5, Symbol = "REL", Rate = 110, TimeStamp = new DateTime(2018, 08, 13, 05, 00, 00) },
+                new HourlyShareRate { Id = 6, Symbol = "REL", Rate = 96, TimeStamp = new DateTime(2018, 08, 13, 06, 00, 00) },
+                new HourlyShareRate { Id = 7, Symbol = "REL", Rate = 97, TimeStamp = new DateTime(2018, 08, 13, 07, 00, 00) },
+                new HourlyShareRate { Id = 8, Symbol = "REL", Rate = 99, TimeStamp = new DateTime(2018, 08, 13, 08, 00, 00) },
+                new HourlyShareRate { Id = 9, Symbol = "CBI", Rate = 91, TimeStamp = new DateTime(2018, 08, 13, 01, 00, 00) },
+                new HourlyShareRate { Id = 10, Symbol = "CBI", Rate = 96, TimeStamp = new DateTime(2018, 08, 13, 02, 00, 00) },
+                new HourlyShareRate { Id = 11, Symbol = "CBI", Rate = 105, TimeStamp = new DateTime(2018, 08, 13, 03, 00, 00) },
+                new HourlyShareRate { Id = 12, Symbol = "CBI", Rate = 87, TimeStamp = new DateTime(2018, 08, 13, 04, 00, 00) },
+                new HourlyShareRate { Id = 13, Symbol = "CBI", Rate = 100, TimeStamp = new DateTime(2018, 08, 13, 05, 00, 00) },
+                new HourlyShareRate { Id = 14, Symbol = "CBI", Rate = 98, TimeStamp = new DateTime(2018, 08, 13, 06, 00, 00) },
+                new HourlyShareRate { Id = 15, Symbol = "CBI", Rate = 95, TimeStamp = new DateTime(2018, 08, 13, 07, 00, 00) },
+                new HourlyShareRate { Id = 16, Symbol = "CBI", Rate = 92, TimeStamp = new DateTime(2018, 08, 13, 08, 00, 00) });
+
+            base.OnModelCreating(modelBuilder);
+        }
+
+        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
+        {
+            base.OnConfiguring(optionsBuilder);
+        }
+    }
+}
diff --git a/CrossExchange/Repository/GenericRepository.cs b/CrossExchange/Repository/GenericRepository.cs
new file mode 100644
index 0000000..0aec867
--- /dev/null
+++ b/CrossExchange/Repository/GenericRepository.cs
@@ -0,0 +1,34 @@
+﻿using System.Linq;
+using System.Threading.Tasks;
+using Microsoft.EntityFrameworkCore;
+
+namespace CrossExchange
+{
+    public abstract class GenericRepository<T> : IGenericRepository<T>
+        where T : class, new()
+    {
+        protected ExchangeContext _dbContext { get; set; }
+
+        public async Task<T> GetAsync(string id)
+        {
+            return await _dbContext.FindAsync<T>(id);
+        }
+
+        public IQueryable<T> Query()
+        {
+            return _dbContext.Set<T>().AsQueryable();
+        }
+
+        public async Task InsertAsync(T entity)
+        {
+            _dbContext.Set<T>().Add(entity);
+            await _dbContext.SaveChangesAsync();
+        }
+
+        public async Task UpdateAsync(T entity)
+        {
+            _dbContext.Entry(entity).State = EntityState.Modified;
+            await _dbContext.SaveChangesAsync();
+        }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/IGenericRepository.cs b/CrossExchange/Repository/IGenericRepository.cs
new file mode 100644
index 0000000..7ec1da7
--- /dev/null
+++ b/CrossExchange/Repository/IGenericRepository.cs
@@ -0,0 +1,16 @@
+using System.Linq;
+using System.Threading.Tasks;
+
+namespace CrossExchange
+{
+    public interface IGenericRepository<T>
+    {
+        Task<T> GetAsync(string id);
+
+        IQueryable<T> Query();
+
+        Task InsertAsync(T entity);
+
+        Task UpdateAsync(T entity);
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/IPortfolioRepository.cs b/CrossExchange/Repository/IPortfolioRepository.cs
new file mode 100644
index 0000000..72909bb
--- /dev/null
+++ b/CrossExchange/Repository/IPortfolioRepository.cs
@@ -0,0 +1,9 @@
+﻿using System.Linq;
+
+namespace CrossExchange
+{
+    public interface IPortfolioRepository : IGenericRepository<Portfolio>
+    {
+        IQueryable<Portfolio> GetAll();
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/IShareRepository.cs b/CrossExchange/Repository/IShareRepository.cs
new file mode 100644
index 0000000..32fd935
--- /dev/null
+++ b/CrossExchange/Repository/IShareRepository.cs
@@ -0,0 +1,6 @@
+﻿namespace CrossExchange
+{
+    public interface IShareRepository : IGenericRepository<HourlyShareRate>
+    {
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/ITradeRepository.cs b/CrossExchange/Repository/ITradeRepository.cs
new file mode 100644
index 0000000..68d9a36
--- /dev/null
+++ b/CrossExchange/Repository/ITradeRepository.cs
@@ -0,0 +1,6 @@
+﻿namespace CrossExchange
+{
+    public interface ITradeRepository : IGenericRepository<Trade>
+    {
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/PortfolioRepository.cs b/CrossExchange/Repository/PortfolioRepository.cs
new file mode 100644
index 0000000..8acaa16
--- /dev/null
+++ b/CrossExchange/Repository/PortfolioRepository.cs
@@ -0,0 +1,18 @@
+using System.Linq;
+using Microsoft.EntityFrameworkCore;
+
+namespace CrossExchange
+{
+    public class PortfolioRepository : GenericRepository<Portfolio>, IPortfolioRepository
+    {
+        public PortfolioRepository(ExchangeContext dbContext)
+        {
+            _dbContext = dbContext;
+        }
+
+        public IQueryable<Portfolio> GetAll()
+        {
+            return _dbContext.Portfolios.Include(x => x.Trade).AsQueryable();
+        }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/ShareRepository.cs b/CrossExchange/Repository/ShareRepository.cs
new file mode 100644
index 0000000..e7b426c
--- /dev/null
+++ b/CrossExchange/Repository/ShareRepository.cs
@@ -0,0 +1,10 @@
+namespace CrossExchange
+{
+    public class ShareRepository : GenericRepository<HourlyShareRate>, IShareRepository
+    {
+        public ShareRepository(ExchangeContext dbContext)
+        {
+            _dbContext = dbContext;
+        }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Repository/TradeRepository.cs b/CrossExchange/Repository/TradeRepository.cs
new file mode 100644
index 0000000..7d6838e
--- /dev/null
+++ b/CrossExchange/Repository/TradeRepository.cs
@@ -0,0 +1,10 @@
+namespace CrossExchange
+{
+    public class TradeRepository : GenericRepository<Trade>, ITradeRepository
+    {
+        public TradeRepository(ExchangeContext dbContext)
+        {
+            _dbContext = dbContext;
+        }
+    }
+}
\ No newline at end of file
diff --git a/CrossExchange/Startup.cs b/CrossExchange/Startup.cs
new file mode 100644
index 0000000..f04ed6b
--- /dev/null
+++ b/CrossExchange/Startup.cs
@@ -0,0 +1,48 @@
+using Microsoft.AspNetCore.Builder;
+using Microsoft.AspNetCore.Hosting;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+
+namespace CrossExchange
+{
+    public class Startup
+    {
+        public Startup(IConfiguration configuration)
+        {
+            Configuration = configuration;
+        }
+
+        public IConfiguration Configuration { get; }
+
+        // This method gets called by the runtime. Use this method to add services to the container.
+        public void ConfigureServices(IServiceCollection services)
+        {
+            services.AddDbContext<ExchangeContext>(options =>
+              options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
+            services.AddTransient<IShareRepository, ShareRepository>();
+            services.AddTransient<IPortfolioRepository, PortfolioRepository>();
+            services.AddTransient<ITradeRepository, TradeRepository>();
+            services.AddMvc();
+        }
+
+        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
+        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
+        {
+            if (env.IsDevelopment())
+            {
+                app.UseDeveloperExceptionPage();
+                app.UseHttpStatusCodeExceptionMiddleware();
+            }
+            else
+            {
+                app.UseHttpStatusCodeExceptionMiddleware();
+                app.UseExceptionHandler();
+            }
+
+            app.UseStaticFiles();
+
+            app.UseMvc();
+        }
+    }
+}
diff --git a/CrossExchange/appsettings.Development.json b/CrossExchange/appsettings.Development.json
new file mode 100644
index 0000000..fa8ce71
--- /dev/null
+++ b/CrossExchange/appsettings.Development.json
@@ -0,0 +1,10 @@
+﻿{
+  "Logging": {
+    "IncludeScopes": false,
+    "LogLevel": {
+      "Default": "Debug",
+      "System": "Information",
+      "Microsoft": "Information"
+    }
+  }
+}
diff --git a/CrossExchange/appsettings.json b/CrossExchange/appsettings.json
new file mode 100644
index 0000000..4eb191b
--- /dev/null
+++ b/CrossExchange/appsettings.json
@@ -0,0 +1,11 @@
+﻿{
+  "ConnectionStrings": {
+    "DefaultConnection": "Server=.\\SQLEXPRESS;Database=CrossExchangeDb;Trusted_Connection=True;"
+  },
+  "Logging": {
+    "IncludeScopes": false,
+    "LogLevel": {
+      "Default": "Warning"
+    }
+  }
+}
diff --git a/Readme.txt b/Readme.txt
new file mode 100644
index 0000000..f2c2b74
--- /dev/null
+++ b/Readme.txt
@@ -0,0 +1,68 @@
+﻿Project Assessment:
+    Cross Exchange is an arbitrarily trading game developed by a startup in a very short span of time called “Super Traders” . The purpose of the application is to educate users on the terminology used in trading of shares.
+
+Notes:
+    - The project registers share and and allow users to updated price of the share on an hourly basis; the share registered should have unique Symbol to identify it and should be all capital letters with 3 characters. The rate of the share should be exactly 2 decimal digits. 
+    - Also, the users should have a portfolio before they can start trading in the shares. 
+    - The frontend application is excluded from the current scope. It is a separate, fully-functional application handled by another team, and we do not want to modify it.
+
+Tasks:
+
+    1) For a given portfolio, with all the registered shares you need to do a trade which could be either a BUY or SELL trade. For a particular trade keep following conditions in mind:
+                BUY:
+                a) The rate at which the shares will be bought will be the latest price in the database.
+                b) The share specified should be a registered one otherwise it should be considered a bad request. 
+                c) The Portfolio of the user should also be registered otherwise it should be considered a bad request. 
+                
+                SELL:
+                a) The share should be there in the portfolio of the customer.
+                b) The Portfolio of the user should be registered otherwise it should be considered a bad request. 
+                c) The rate at which the shares will be sold will be the latest price in the database.
+                d) The number of shares should be sufficient so that it can be sold. 
+        Hint: You need to group the total shares bought and sold of a particular share and see the difference to figure out if there are sufficient quantities available for SELL. 
+
+    Your goal is to complete the above task. The API specifications are already there in the code as agreed with the frontend team. 
+
+    2) There are a few bugs in the application that we would like you to fix. Even though the project might not be in a great structure, please do not spend your valuable time on structural modifications - just focus on fixing the bugs.
+
+    3) Increase unit test coverage to reach code coverage up to 60%, achieving more than 60% will only consume your valuable time without any extra score.
+
+    PLEASE NOTE THAT ALL OF THE TASKS LISTED ABOVE ARE MANDATORY.
+
+    We will evaluate your submission on the following parameters:
+        - Implementation of new feature
+        - Bug fixes
+        - Unit Tests
+
+    Prerequisites:
+       	- GIT
+ 		- VS2017
+ 		- .NET Core 2.0
+ 		- SQL Server 2012+
+
+
+   Development Environment:
+        Cross Exchange application:
+        
+        - Modify the database connection string as per your instance and authentication.
+        - On any terminal move to the "CrossExchange" folder (the folder containing the "CrossExchange.csproj" file) and execute these commands:
+
+        dotnet restore
+        dotnet build
+        dotnet ef database update
+
+        - Now you can call the API using any tool, like Postman, Curl, etc 
+        
+        - To check code coverage, execute the batch script:
+        coverage.bat
+
+   Production Environment:
+        This is how we are going to run and evaluate your submission, so please make sure to run below steps before submitting your answer.
+
+        1) Make sure to run unit tests, check code coverage, ensure the application is compiling and all dependencies are included.
+        2) Commit everything to use.
+                (git add --all && git commit -m "My submission")
+        3) Create patch file with the name without spaces 'cross-exchange-dotnet_<YourNameHere>.patch', using the specified tag as the starting point.
+                (git format-patch initial-commit --stdout > cross-exchange-dotnet_<yournamehere>.patch)
+        4) Store your file in a shared location where Crossover team can access and download it for evaluation. and add your sharable link in the answer field of this question.
+
-- 
2.10.2.windows.1

